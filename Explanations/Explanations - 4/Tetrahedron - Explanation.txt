You are given a tetrahedron. Let's mark its vertices with letters A, B, C and D correspondingly.


An ant is standing in the vertex D of the tetrahedron. The ant is quite active and he wouldn't stay idle. 
At each moment of time he makes a step from one vertex to another one along some edge of the tetrahedron. The ant just can't stand on one place.

You do not have to do much to solve the problem: your task is to count the number of ways in which the ant can go from the initial vertex D to itself in exactly n steps. 
In other words, you are asked to find out the number of different cyclic paths with the length of n from vertex D to itself. 
As the number can be quite large, you should print it modulo 1000000007 (10^9 + 7).

Input
The first line contains the only integer n (1 ≤ n ≤ 10^7) — the required length of the cyclic path.

Output
Print the only integer — the required number of ways modulo 1000000007 (10^9 + 7).

-------------------------------------------------------------------------------------------

Here, D is the only vertex that is different from the others. A, B and C are indistinguishable in the sense that they all share one edge with the destination and 
two edges with the non-destinations.

Let f(n, X) be the number of ways to reach the destination D from vertex 'X' if there are n moves left and the ant is currently on 'X'.

f(0, D) = 1 {Because we are already at the destination}
f(0, A/B/C) = 0 {Because we aren't at the destination}

This is the reason they are two different cases 
From a given vertex, the ant can make 3 moves. 

Case 1 : If the ant is on vertex D, then he can move to either vertex A, B or C.

f(n, D) = 3 f(n-1, A/B/C)

Case 2 : If the ant is on A, B or C, then he can move to either the destination or one of it's other two non-destination neighbours.

f(n, A/B/C) = f(n-1, D) + 2(n-1, A/B/C)

Since, the pointer notation would make it hard to read and to evaluate f(n, X) we only need f(n - 1, X), we don't need to store the value in a table. 
We can get away with auxiliary variables storing f(n-1, D) and f(n-1, A/B/C). This improves readability and space consumed. 

f(n, D) is the answer since the ant originally starts from D. 
